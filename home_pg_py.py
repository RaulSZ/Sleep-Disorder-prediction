# -*- coding: utf-8 -*-
"""home_pg.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DHyS444eY_IDFFV2p_zs7Hx2n2vM16ed
"""
import pandas as pd
import streamlit as st
import pickle
from PIL import Image
import numpy as np
df = pd.read_csv('Sleep_health_and_lifestyle_dataset.csv')

df.head()

df['Occupation'].unique()

rf = pickle.load(open('rf_model.pkl', 'rb'))
xgb = pickle.load(open('xgb_model.pkl', 'rb'))

st.title('Sleep Disorder prediction using RF & XGBoost models')
gender = st.selectbox('Gender', ('Male', 'Female'))
if gender == 'Male':
    gender = 1
else:
    gender = 0
occp = st.selectbox('Occupation',( 'Software Engineer', 'Doctor', 'Sales Representative', 'Teacher',
       'Nurse', 'Engineer', 'Accountant', 'Scientist', 'Lawyer',
       'Salesperson', 'Manager'))
if occp == 'Software Engineer':
    occp = 0
elif occp == 'Doctor':
    occp = 1
elif occp == 'Sales Representative':
    occp = 2
elif occp == 'Teacher':
    occp = 3
elif occp == 'Nurse':
    occp = 4
elif occp == 'Engineer':
    occp = 5
elif occp == 'Accountant':
    occp = 6
elif occp == 'Scientist':
    occp = 7
elif occp == 'Lawyer':
    occp = 8
elif occp == 'Salesperson':
    occp = 9
else:
    occp = 10
age = st.slider('Age', 0, 100, 30)
sleep_dur = st.slider('Sleep Duration', 0, 12, 5)
quality_sleep = st.slider('Quality of Sleep', 0, 10, 5)
physical_activity_level = st.slider('Physical Activity Level', 0, 100, 40)
stress_level = st.slider('Stress Level', 0, 15, 5)
bmi_category = st.selectbox('BMI Category', ('Underweight', 'Normal', 'Overweight', 'Obesity'))
if bmi_category == 'Underweight':
    bmi_category = 0
elif bmi_category == 'Normal':
    bmi_category = 1
elif bmi_category == 'Overweight':
    bmi_category = 2
else:
    bmi_category = 3

heart_rate = st.slider('Heart Rate:', 0, 100, 50)
daily_steps = st.slider('Daily Steps', 0, 15000, 5000)
bp = st.slider('Bp', 0, 140, 50)

input_data  = np.array([gender, occp, age, sleep_dur, quality_sleep, physical_activity_level, stress_level, bmi_category, heart_rate, daily_steps, bp])
if st.button('Predict'):
  rf_res = rf.predict(input_data)[0]
  xgb_res = xgb.predict(input_data)[0]
  st.subheader('Results')
  st.write(f"RF prediction: {'Diabetic' if rf_res == 1 else 'Not Diabetic'}")
  st.write(f"XGBoost prediction: {'Diabetic' if xgb_res == 1 else 'Not Diabetic'}")

st.subheader('Feature importances: ')
col1, col2 = st.columns(2)
with col1:
  st.markdown("Random Forest importances: ")
  st.image('Random Forest_feature_importance.png')
with col2:
  st.markdown("XGBoost importances: ")
  st.image('XGBoost_feature_importance.png')
